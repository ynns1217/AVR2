
Mini Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  000004fa  0000058e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800154  00800154  000005e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000614  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001776  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b2a  00000000  00000000  00001eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b4  00000000  00000000  000029d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00003388  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000506  00000000  00000000  0000354c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a0d  00000000  00000000  00003a52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  0000445f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ef       	ldi	r30, 0xFA	; 250
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 35       	cpi	r26, 0x54	; 84
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e5       	ldi	r26, 0x54	; 84
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 35       	cpi	r26, 0x5B	; 91
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ab d1       	rcall	.+854    	; 0x41a <main>
  c4:	18 c2       	rjmp	.+1072   	; 0x4f6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Lcd_Data>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	e5 e6       	ldi	r30, 0x65	; 101
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	90 81       	ld	r25, Z
  ce:	91 60       	ori	r25, 0x01	; 1
  d0:	90 83       	st	Z, r25
  d2:	90 81       	ld	r25, Z
  d4:	9d 7f       	andi	r25, 0xFD	; 253
  d6:	90 83       	st	Z, r25
  d8:	90 81       	ld	r25, Z
  da:	94 60       	ori	r25, 0x04	; 4
  dc:	90 83       	st	Z, r25
  de:	90 e1       	ldi	r25, 0x10	; 16
  e0:	9a 95       	dec	r25
  e2:	f1 f7       	brne	.-4      	; 0xe0 <Lcd_Data+0x18>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <Lcd_Data+0x1e>
  e6:	8b bb       	out	0x1b, r24	; 27
  e8:	80 e1       	ldi	r24, 0x10	; 16
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <Lcd_Data+0x22>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <Lcd_Data+0x28>
  f0:	80 81       	ld	r24, Z
  f2:	8b 7f       	andi	r24, 0xFB	; 251
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret

000000f8 <Lcd_Cmd>:
  f8:	e5 e6       	ldi	r30, 0x65	; 101
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	90 81       	ld	r25, Z
  fe:	9e 7f       	andi	r25, 0xFE	; 254
 100:	90 83       	st	Z, r25
 102:	90 81       	ld	r25, Z
 104:	9d 7f       	andi	r25, 0xFD	; 253
 106:	90 83       	st	Z, r25
 108:	90 81       	ld	r25, Z
 10a:	94 60       	ori	r25, 0x04	; 4
 10c:	90 83       	st	Z, r25
 10e:	90 e1       	ldi	r25, 0x10	; 16
 110:	9a 95       	dec	r25
 112:	f1 f7       	brne	.-4      	; 0x110 <Lcd_Cmd+0x18>
 114:	00 c0       	rjmp	.+0      	; 0x116 <Lcd_Cmd+0x1e>
 116:	8b bb       	out	0x1b, r24	; 27
 118:	80 e1       	ldi	r24, 0x10	; 16
 11a:	8a 95       	dec	r24
 11c:	f1 f7       	brne	.-4      	; 0x11a <Lcd_Cmd+0x22>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <Lcd_Cmd+0x28>
 120:	80 81       	ld	r24, Z
 122:	8b 7f       	andi	r24, 0xFB	; 251
 124:	80 83       	st	Z, r24
 126:	08 95       	ret

00000128 <Lcd_CHAR>:
 128:	cf df       	rcall	.-98     	; 0xc8 <Lcd_Data>
 12a:	89 ef       	ldi	r24, 0xF9	; 249
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <Lcd_CHAR+0x6>
 132:	00 c0       	rjmp	.+0      	; 0x134 <Lcd_CHAR+0xc>
 134:	00 00       	nop
 136:	08 95       	ret

00000138 <Lcd_STR>:
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	ec 01       	movw	r28, r24
 13e:	02 c0       	rjmp	.+4      	; 0x144 <Lcd_STR+0xc>
 140:	f3 df       	rcall	.-26     	; 0x128 <Lcd_CHAR>
 142:	21 96       	adiw	r28, 0x01	; 1
 144:	88 81       	ld	r24, Y
 146:	81 11       	cpse	r24, r1
 148:	fb cf       	rjmp	.-10     	; 0x140 <Lcd_STR+0x8>
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <Lcd_Pos>:
 150:	90 e4       	ldi	r25, 0x40	; 64
 152:	89 9f       	mul	r24, r25
 154:	60 0d       	add	r22, r0
 156:	11 24       	eor	r1, r1
 158:	86 2f       	mov	r24, r22
 15a:	80 68       	ori	r24, 0x80	; 128
 15c:	cd df       	rcall	.-102    	; 0xf8 <Lcd_Cmd>
 15e:	83 ec       	ldi	r24, 0xC3	; 195
 160:	99 e0       	ldi	r25, 0x09	; 9
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <Lcd_Pos+0x12>
 166:	00 c0       	rjmp	.+0      	; 0x168 <Lcd_Pos+0x18>
 168:	00 00       	nop
 16a:	08 95       	ret

0000016c <Lcd_Clear>:
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	c4 df       	rcall	.-120    	; 0xf8 <Lcd_Cmd>
 170:	83 ec       	ldi	r24, 0xC3	; 195
 172:	99 e0       	ldi	r25, 0x09	; 9
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <Lcd_Clear+0x8>
 178:	00 c0       	rjmp	.+0      	; 0x17a <Lcd_Clear+0xe>
 17a:	00 00       	nop
 17c:	08 95       	ret

0000017e <Lcd_Init>:
	}
}

void Lcd_Init(void)
{
	Lcd_Cmd(0x38);
 17e:	88 e3       	ldi	r24, 0x38	; 56
 180:	bb df       	rcall	.-138    	; 0xf8 <Lcd_Cmd>
 182:	83 ef       	ldi	r24, 0xF3	; 243
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <Lcd_Init+0x8>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <Lcd_Init+0xe>
 18c:	00 00       	nop
	_delay_ms(2);	//명령어를 IR에 쓰고나면 40us 또는 1.64ms을 기다림.
	Lcd_Cmd(0x38);
 18e:	88 e3       	ldi	r24, 0x38	; 56
 190:	b3 df       	rcall	.-154    	; 0xf8 <Lcd_Cmd>
 192:	83 ef       	ldi	r24, 0xF3	; 243
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <Lcd_Init+0x18>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <Lcd_Init+0x1e>
	_delay_ms(2);
	Lcd_Cmd(0x38);
 19c:	00 00       	nop
 19e:	88 e3       	ldi	r24, 0x38	; 56
 1a0:	ab df       	rcall	.-170    	; 0xf8 <Lcd_Cmd>
 1a2:	83 ef       	ldi	r24, 0xF3	; 243
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <Lcd_Init+0x28>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <Lcd_Init+0x2e>
	_delay_ms(2);
	Lcd_Cmd(0x0c);
 1ac:	00 00       	nop
 1ae:	8c e0       	ldi	r24, 0x0C	; 12
 1b0:	a3 df       	rcall	.-186    	; 0xf8 <Lcd_Cmd>
 1b2:	83 ef       	ldi	r24, 0xF3	; 243
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <Lcd_Init+0x38>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <Lcd_Init+0x3e>
	_delay_ms(2);
	Lcd_Cmd(0x06);
 1bc:	00 00       	nop
 1be:	86 e0       	ldi	r24, 0x06	; 6
 1c0:	9b df       	rcall	.-202    	; 0xf8 <Lcd_Cmd>
 1c2:	83 ef       	ldi	r24, 0xF3	; 243
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <Lcd_Init+0x48>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <Lcd_Init+0x4e>
	_delay_ms(2);
	Lcd_Clear();
 1cc:	00 00       	nop
 1ce:	ce cf       	rjmp	.-100    	; 0x16c <Lcd_Clear>
 1d0:	08 95       	ret

000001d2 <init_keypad>:
 1d2:	88 ef       	ldi	r24, 0xF8	; 248
 1d4:	84 bb       	out	0x14, r24	; 20
 1d6:	87 e0       	ldi	r24, 0x07	; 7
 1d8:	85 bb       	out	0x15, r24	; 21
 1da:	08 95       	ret

000001dc <keyscan>:
 1dc:	88 e0       	ldi	r24, 0x08	; 8
 1de:	85 bb       	out	0x15, r24	; 21
 1e0:	83 e3       	ldi	r24, 0x33	; 51
 1e2:	97 e0       	ldi	r25, 0x07	; 7
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <keyscan+0x8>
 1e8:	83 b3       	in	r24, 0x13	; 19
 1ea:	87 70       	andi	r24, 0x07	; 7
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	09 f4       	brne	.+2      	; 0x1f2 <keyscan+0x16>
 1f0:	5d c0       	rjmp	.+186    	; 0x2ac <keyscan+0xd0>
 1f2:	83 b3       	in	r24, 0x13	; 19
 1f4:	87 70       	andi	r24, 0x07	; 7
 1f6:	82 30       	cpi	r24, 0x02	; 2
 1f8:	09 f4       	brne	.+2      	; 0x1fc <keyscan+0x20>
 1fa:	5a c0       	rjmp	.+180    	; 0x2b0 <keyscan+0xd4>
 1fc:	83 b3       	in	r24, 0x13	; 19
 1fe:	87 70       	andi	r24, 0x07	; 7
 200:	84 30       	cpi	r24, 0x04	; 4
 202:	09 f4       	brne	.+2      	; 0x206 <keyscan+0x2a>
 204:	57 c0       	rjmp	.+174    	; 0x2b4 <keyscan+0xd8>
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	97 e4       	ldi	r25, 0x47	; 71
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <keyscan+0x2e>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <keyscan+0x34>
 210:	00 00       	nop
 212:	80 e1       	ldi	r24, 0x10	; 16
 214:	85 bb       	out	0x15, r24	; 21
 216:	83 e3       	ldi	r24, 0x33	; 51
 218:	97 e0       	ldi	r25, 0x07	; 7
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <keyscan+0x3e>
 21e:	83 b3       	in	r24, 0x13	; 19
 220:	87 70       	andi	r24, 0x07	; 7
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	09 f4       	brne	.+2      	; 0x228 <keyscan+0x4c>
 226:	48 c0       	rjmp	.+144    	; 0x2b8 <keyscan+0xdc>
 228:	83 b3       	in	r24, 0x13	; 19
 22a:	87 70       	andi	r24, 0x07	; 7
 22c:	82 30       	cpi	r24, 0x02	; 2
 22e:	09 f4       	brne	.+2      	; 0x232 <keyscan+0x56>
 230:	45 c0       	rjmp	.+138    	; 0x2bc <keyscan+0xe0>
 232:	83 b3       	in	r24, 0x13	; 19
 234:	87 70       	andi	r24, 0x07	; 7
 236:	84 30       	cpi	r24, 0x04	; 4
 238:	09 f4       	brne	.+2      	; 0x23c <keyscan+0x60>
 23a:	42 c0       	rjmp	.+132    	; 0x2c0 <keyscan+0xe4>
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	97 e4       	ldi	r25, 0x47	; 71
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <keyscan+0x64>
 244:	00 c0       	rjmp	.+0      	; 0x246 <keyscan+0x6a>
 246:	00 00       	nop
 248:	80 e2       	ldi	r24, 0x20	; 32
 24a:	85 bb       	out	0x15, r24	; 21
 24c:	83 e3       	ldi	r24, 0x33	; 51
 24e:	97 e0       	ldi	r25, 0x07	; 7
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <keyscan+0x74>
 254:	83 b3       	in	r24, 0x13	; 19
 256:	87 70       	andi	r24, 0x07	; 7
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	a1 f1       	breq	.+104    	; 0x2c4 <keyscan+0xe8>
 25c:	83 b3       	in	r24, 0x13	; 19
 25e:	87 70       	andi	r24, 0x07	; 7
 260:	82 30       	cpi	r24, 0x02	; 2
 262:	91 f1       	breq	.+100    	; 0x2c8 <keyscan+0xec>
 264:	83 b3       	in	r24, 0x13	; 19
 266:	87 70       	andi	r24, 0x07	; 7
 268:	84 30       	cpi	r24, 0x04	; 4
 26a:	81 f1       	breq	.+96     	; 0x2cc <keyscan+0xf0>
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	97 e4       	ldi	r25, 0x47	; 71
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <keyscan+0x94>
 274:	00 c0       	rjmp	.+0      	; 0x276 <keyscan+0x9a>
 276:	00 00       	nop
 278:	80 e4       	ldi	r24, 0x40	; 64
 27a:	85 bb       	out	0x15, r24	; 21
 27c:	83 e3       	ldi	r24, 0x33	; 51
 27e:	97 e0       	ldi	r25, 0x07	; 7
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <keyscan+0xa4>
 284:	83 b3       	in	r24, 0x13	; 19
 286:	87 70       	andi	r24, 0x07	; 7
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	11 f1       	breq	.+68     	; 0x2d0 <keyscan+0xf4>
 28c:	83 b3       	in	r24, 0x13	; 19
 28e:	87 70       	andi	r24, 0x07	; 7
 290:	82 30       	cpi	r24, 0x02	; 2
 292:	01 f1       	breq	.+64     	; 0x2d4 <keyscan+0xf8>
 294:	83 b3       	in	r24, 0x13	; 19
 296:	87 70       	andi	r24, 0x07	; 7
 298:	84 30       	cpi	r24, 0x04	; 4
 29a:	f1 f0       	breq	.+60     	; 0x2d8 <keyscan+0xfc>
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	97 e4       	ldi	r25, 0x47	; 71
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <keyscan+0xc4>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <keyscan+0xca>
 2a6:	00 00       	nop
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	08 95       	ret
 2ac:	81 e3       	ldi	r24, 0x31	; 49
 2ae:	08 95       	ret
 2b0:	82 e3       	ldi	r24, 0x32	; 50
 2b2:	08 95       	ret
 2b4:	83 e3       	ldi	r24, 0x33	; 51
 2b6:	08 95       	ret
 2b8:	84 e3       	ldi	r24, 0x34	; 52
 2ba:	08 95       	ret
 2bc:	85 e3       	ldi	r24, 0x35	; 53
 2be:	08 95       	ret
 2c0:	86 e3       	ldi	r24, 0x36	; 54
 2c2:	08 95       	ret
 2c4:	87 e3       	ldi	r24, 0x37	; 55
 2c6:	08 95       	ret
 2c8:	88 e3       	ldi	r24, 0x38	; 56
 2ca:	08 95       	ret
 2cc:	89 e3       	ldi	r24, 0x39	; 57
 2ce:	08 95       	ret
 2d0:	8a e2       	ldi	r24, 0x2A	; 42
 2d2:	08 95       	ret
 2d4:	80 e3       	ldi	r24, 0x30	; 48
 2d6:	08 95       	ret
 2d8:	83 e2       	ldi	r24, 0x23	; 35
 2da:	08 95       	ret

000002dc <insert_keypad>:
 2dc:	7a df       	rcall	.-268    	; 0x1d2 <init_keypad>
 2de:	7e cf       	rjmp	.-260    	; 0x1dc <keyscan>
 2e0:	08 95       	ret

000002e2 <lcd1>:
 2e2:	4d df       	rcall	.-358    	; 0x17e <Lcd_Init>
 2e4:	43 df       	rcall	.-378    	; 0x16c <Lcd_Clear>
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	32 df       	rcall	.-412    	; 0x150 <Lcd_Pos>
 2ec:	86 e2       	ldi	r24, 0x26	; 38
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	23 df       	rcall	.-442    	; 0x138 <Lcd_STR>
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	2c df       	rcall	.-424    	; 0x150 <Lcd_Pos>
 2f8:	86 e3       	ldi	r24, 0x36	; 54
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	1d df       	rcall	.-454    	; 0x138 <Lcd_STR>
 2fe:	ee df       	rcall	.-36     	; 0x2dc <insert_keypad>
 300:	88 23       	and	r24, r24
 302:	d1 f0       	breq	.+52     	; 0x338 <lcd1+0x56>
 304:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <__data_end>
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	ea 5a       	subi	r30, 0xAA	; 170
 30c:	fe 4f       	sbci	r31, 0xFE	; 254
 30e:	80 83       	st	Z, r24
 310:	6a e0       	ldi	r22, 0x0A	; 10
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	1d df       	rcall	.-454    	; 0x150 <Lcd_Pos>
 316:	86 e5       	ldi	r24, 0x56	; 86
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	0e df       	rcall	.-484    	; 0x138 <Lcd_STR>
 31c:	2f ef       	ldi	r18, 0xFF	; 255
 31e:	8f e7       	ldi	r24, 0x7F	; 127
 320:	96 e1       	ldi	r25, 0x16	; 22
 322:	21 50       	subi	r18, 0x01	; 1
 324:	80 40       	sbci	r24, 0x00	; 0
 326:	90 40       	sbci	r25, 0x00	; 0
 328:	e1 f7       	brne	.-8      	; 0x322 <lcd1+0x40>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <lcd1+0x4a>
 32c:	00 00       	nop
 32e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
 332:	8f 5f       	subi	r24, 0xFF	; 255
 334:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__data_end>
 338:	08 95       	ret

0000033a <error_lcd>:
 33a:	21 df       	rcall	.-446    	; 0x17e <Lcd_Init>
 33c:	17 df       	rcall	.-466    	; 0x16c <Lcd_Clear>
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	06 df       	rcall	.-500    	; 0x150 <Lcd_Pos>
 344:	86 e4       	ldi	r24, 0x46	; 70
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	f7 de       	rcall	.-530    	; 0x138 <Lcd_STR>
 34a:	2f ef       	ldi	r18, 0xFF	; 255
 34c:	8f e7       	ldi	r24, 0x7F	; 127
 34e:	96 e1       	ldi	r25, 0x16	; 22
 350:	21 50       	subi	r18, 0x01	; 1
 352:	80 40       	sbci	r24, 0x00	; 0
 354:	90 40       	sbci	r25, 0x00	; 0
 356:	e1 f7       	brne	.-8      	; 0x350 <error_lcd+0x16>
 358:	00 c0       	rjmp	.+0      	; 0x35a <error_lcd+0x20>
 35a:	00 00       	nop
 35c:	08 95       	ret

0000035e <motor>:
 35e:	80 e1       	ldi	r24, 0x10	; 16
 360:	82 bb       	out	0x12, r24	; 18
 362:	2f ef       	ldi	r18, 0xFF	; 255
 364:	8f e3       	ldi	r24, 0x3F	; 63
 366:	92 e0       	ldi	r25, 0x02	; 2
 368:	21 50       	subi	r18, 0x01	; 1
 36a:	80 40       	sbci	r24, 0x00	; 0
 36c:	90 40       	sbci	r25, 0x00	; 0
 36e:	e1 f7       	brne	.-8      	; 0x368 <motor+0xa>
 370:	00 c0       	rjmp	.+0      	; 0x372 <motor+0x14>
 372:	00 00       	nop
 374:	80 e2       	ldi	r24, 0x20	; 32
 376:	82 bb       	out	0x12, r24	; 18
 378:	2f ef       	ldi	r18, 0xFF	; 255
 37a:	8f e3       	ldi	r24, 0x3F	; 63
 37c:	92 e0       	ldi	r25, 0x02	; 2
 37e:	21 50       	subi	r18, 0x01	; 1
 380:	80 40       	sbci	r24, 0x00	; 0
 382:	90 40       	sbci	r25, 0x00	; 0
 384:	e1 f7       	brne	.-8      	; 0x37e <motor+0x20>
 386:	00 c0       	rjmp	.+0      	; 0x388 <motor+0x2a>
 388:	00 00       	nop
 38a:	80 e4       	ldi	r24, 0x40	; 64
 38c:	82 bb       	out	0x12, r24	; 18
 38e:	2f ef       	ldi	r18, 0xFF	; 255
 390:	8f e3       	ldi	r24, 0x3F	; 63
 392:	92 e0       	ldi	r25, 0x02	; 2
 394:	21 50       	subi	r18, 0x01	; 1
 396:	80 40       	sbci	r24, 0x00	; 0
 398:	90 40       	sbci	r25, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <motor+0x36>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <motor+0x40>
 39e:	00 00       	nop
 3a0:	80 e8       	ldi	r24, 0x80	; 128
 3a2:	82 bb       	out	0x12, r24	; 18
 3a4:	2f ef       	ldi	r18, 0xFF	; 255
 3a6:	8f e3       	ldi	r24, 0x3F	; 63
 3a8:	92 e0       	ldi	r25, 0x02	; 2
 3aa:	21 50       	subi	r18, 0x01	; 1
 3ac:	80 40       	sbci	r24, 0x00	; 0
 3ae:	90 40       	sbci	r25, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <motor+0x4c>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <motor+0x56>
 3b4:	00 00       	nop
 3b6:	d3 cf       	rjmp	.-90     	; 0x35e <motor>

000003b8 <sound2>:

void sound2()
{
	while(1)
	{
		ICR3 = 7372800/DoReMi[piano]/4; // 버튼에 맞는 음향을 연주
 3b8:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <piano>
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	ee 0f       	add	r30, r30
 3c0:	ff 1f       	adc	r31, r31
 3c2:	eb 5f       	subi	r30, 0xFB	; 251
 3c4:	fe 4f       	sbci	r31, 0xFE	; 254
 3c6:	20 81       	ld	r18, Z
 3c8:	31 81       	ldd	r19, Z+1	; 0x01
 3ca:	40 e0       	ldi	r20, 0x00	; 0
 3cc:	50 e0       	ldi	r21, 0x00	; 0
 3ce:	60 e0       	ldi	r22, 0x00	; 0
 3d0:	70 e2       	ldi	r23, 0x20	; 32
 3d2:	8c e1       	ldi	r24, 0x1C	; 28
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	48 d0       	rcall	.+144    	; 0x468 <__divmodsi4>
 3d8:	e0 e8       	ldi	r30, 0x80	; 128
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	31 83       	std	Z+1, r19	; 0x01
 3de:	20 83       	st	Z, r18
		OCR3C = ICR3/4; // 50% 듀티비
 3e0:	80 81       	ld	r24, Z
 3e2:	91 81       	ldd	r25, Z+1	; 0x01
 3e4:	96 95       	lsr	r25
 3e6:	87 95       	ror	r24
 3e8:	96 95       	lsr	r25
 3ea:	87 95       	ror	r24
 3ec:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
 3f0:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
		piano++;		// piano 변수 1증가
 3f4:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <piano>
 3f8:	8f 5f       	subi	r24, 0xFF	; 255
 3fa:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <piano>
		if(3 < piano)	piano = 0;
 3fe:	84 30       	cpi	r24, 0x04	; 4
 400:	10 f0       	brcs	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 402:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <piano>
 406:	2f ef       	ldi	r18, 0xFF	; 255
 408:	8f e7       	ldi	r24, 0x7F	; 127
 40a:	94 e0       	ldi	r25, 0x04	; 4
 40c:	21 50       	subi	r18, 0x01	; 1
 40e:	80 40       	sbci	r24, 0x00	; 0
 410:	90 40       	sbci	r25, 0x00	; 0
 412:	e1 f7       	brne	.-8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 414:	00 c0       	rjmp	.+0      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 416:	00 00       	nop
 418:	cf cf       	rjmp	.-98     	; 0x3b8 <sound2>

0000041a <main>:
}


int main(void)
{
	DDRD = 0xF0;				// STEP 0~STEP 3을 출력 포트로 설정
 41a:	80 ef       	ldi	r24, 0xF0	; 240
 41c:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;
 41e:	8f ef       	ldi	r24, 0xFF	; 255
 420:	8a bb       	out	0x1a, r24	; 26
	DDRG = 0x0F;
 422:	8f e0       	ldi	r24, 0x0F	; 15
 424:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	DDRE = 0x08; // e출력
 428:	88 e0       	ldi	r24, 0x08	; 8
 42a:	82 b9       	out	0x02, r24	; 2
	
	TCCR3A = 0x40;
 42c:	80 e4       	ldi	r24, 0x40	; 64
 42e:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = 0x19;
 432:	89 e1       	ldi	r24, 0x19	; 25
 434:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	TCCR3C = 0x00; // WGM3(3:0) = “1110”, Fast PWM, 모드 14	
 438:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
	TCNT3 = 0x0000; // 타이머3 카운터 초기화
 43c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 440:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	while(1)
	{
		lcd1();
 444:	4e df       	rcall	.-356    	; 0x2e2 <lcd1>
		
		if (Num_TX == 4)
 446:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
 44a:	84 30       	cpi	r24, 0x04	; 4
 44c:	51 f4       	brne	.+20     	; 0x462 <main+0x48>
		{
			if(strcmp(key,bimilNum) == 0)
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	71 e0       	ldi	r23, 0x01	; 1
 452:	86 e5       	ldi	r24, 0x56	; 86
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	46 d0       	rcall	.+140    	; 0x4e4 <strcmp>
 458:	89 2b       	or	r24, r25
			{
				motor();
 45a:	09 f4       	brne	.+2      	; 0x45e <main+0x44>
				break;
			}
			
			else
			{
				error_lcd();
 45c:	80 df       	rcall	.-256    	; 0x35e <motor>
 45e:	6d df       	rcall	.-294    	; 0x33a <error_lcd>
				sound2();
 460:	ab df       	rcall	.-170    	; 0x3b8 <sound2>
 462:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <__data_end>
				break;
			}

		}		
					Num_TX =0;
 466:	ee cf       	rjmp	.-36     	; 0x444 <main+0x2a>

00000468 <__divmodsi4>:
	}
 468:	05 2e       	mov	r0, r21
 46a:	97 fb       	bst	r25, 7
 46c:	16 f4       	brtc	.+4      	; 0x472 <__divmodsi4+0xa>
 46e:	00 94       	com	r0
 470:	0f d0       	rcall	.+30     	; 0x490 <__negsi2>
 472:	57 fd       	sbrc	r21, 7
 474:	05 d0       	rcall	.+10     	; 0x480 <__divmodsi4_neg2>
 476:	14 d0       	rcall	.+40     	; 0x4a0 <__udivmodsi4>
 478:	07 fc       	sbrc	r0, 7
 47a:	02 d0       	rcall	.+4      	; 0x480 <__divmodsi4_neg2>
 47c:	46 f4       	brtc	.+16     	; 0x48e <__divmodsi4_exit>
 47e:	08 c0       	rjmp	.+16     	; 0x490 <__negsi2>

00000480 <__divmodsi4_neg2>:
 480:	50 95       	com	r21
 482:	40 95       	com	r20
 484:	30 95       	com	r19
 486:	21 95       	neg	r18
 488:	3f 4f       	sbci	r19, 0xFF	; 255
 48a:	4f 4f       	sbci	r20, 0xFF	; 255
 48c:	5f 4f       	sbci	r21, 0xFF	; 255

0000048e <__divmodsi4_exit>:
 48e:	08 95       	ret

00000490 <__negsi2>:
 490:	90 95       	com	r25
 492:	80 95       	com	r24
 494:	70 95       	com	r23
 496:	61 95       	neg	r22
 498:	7f 4f       	sbci	r23, 0xFF	; 255
 49a:	8f 4f       	sbci	r24, 0xFF	; 255
 49c:	9f 4f       	sbci	r25, 0xFF	; 255
 49e:	08 95       	ret

000004a0 <__udivmodsi4>:
 4a0:	a1 e2       	ldi	r26, 0x21	; 33
 4a2:	1a 2e       	mov	r1, r26
 4a4:	aa 1b       	sub	r26, r26
 4a6:	bb 1b       	sub	r27, r27
 4a8:	fd 01       	movw	r30, r26
 4aa:	0d c0       	rjmp	.+26     	; 0x4c6 <__udivmodsi4_ep>

000004ac <__udivmodsi4_loop>:
 4ac:	aa 1f       	adc	r26, r26
 4ae:	bb 1f       	adc	r27, r27
 4b0:	ee 1f       	adc	r30, r30
 4b2:	ff 1f       	adc	r31, r31
 4b4:	a2 17       	cp	r26, r18
 4b6:	b3 07       	cpc	r27, r19
 4b8:	e4 07       	cpc	r30, r20
 4ba:	f5 07       	cpc	r31, r21
 4bc:	20 f0       	brcs	.+8      	; 0x4c6 <__udivmodsi4_ep>
 4be:	a2 1b       	sub	r26, r18
 4c0:	b3 0b       	sbc	r27, r19
 4c2:	e4 0b       	sbc	r30, r20
 4c4:	f5 0b       	sbc	r31, r21

000004c6 <__udivmodsi4_ep>:
 4c6:	66 1f       	adc	r22, r22
 4c8:	77 1f       	adc	r23, r23
 4ca:	88 1f       	adc	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	1a 94       	dec	r1
 4d0:	69 f7       	brne	.-38     	; 0x4ac <__udivmodsi4_loop>
 4d2:	60 95       	com	r22
 4d4:	70 95       	com	r23
 4d6:	80 95       	com	r24
 4d8:	90 95       	com	r25
 4da:	9b 01       	movw	r18, r22
 4dc:	ac 01       	movw	r20, r24
 4de:	bd 01       	movw	r22, r26
 4e0:	cf 01       	movw	r24, r30
 4e2:	08 95       	ret

000004e4 <strcmp>:
 4e4:	fb 01       	movw	r30, r22
 4e6:	dc 01       	movw	r26, r24
 4e8:	8d 91       	ld	r24, X+
 4ea:	01 90       	ld	r0, Z+
 4ec:	80 19       	sub	r24, r0
 4ee:	01 10       	cpse	r0, r1
 4f0:	d9 f3       	breq	.-10     	; 0x4e8 <strcmp+0x4>
 4f2:	99 0b       	sbc	r25, r25
 4f4:	08 95       	ret

000004f6 <_exit>:
 4f6:	f8 94       	cli

000004f8 <__stop_program>:
 4f8:	ff cf       	rjmp	.-2      	; 0x4f8 <__stop_program>
