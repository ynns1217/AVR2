
interrupt03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000014c  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e1  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000081e  00000000  00000000  00000b45  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031e  00000000  00000000  00001363  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001684  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000421  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000097  00000000  00000000  00001b09  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001ba0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4f c0       	rjmp	.+158    	; 0xb8 <__vector_6>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5c c0       	rjmp	.+184    	; 0xda <__vector_8>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e4       	ldi	r30, 0x4C	; 76
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	24 d0       	rcall	.+72     	; 0xfc <main>
  b4:	49 c0       	rjmp	.+146    	; 0x148 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <__vector_6>:
#include <avr/interrupt.h>
#include <util/delay.h>

volatile unsigned char Shift_flag =1;
SIGNAL(INT5_vect)
{
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	8f 93       	push	r24
	cli();
  c4:	f8 94       	cli
	Shift_flag = 1;
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	sei();	
  cc:	78 94       	sei
}
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <__vector_8>:
SIGNAL(INT7_vect)
{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
	cli();
  e6:	f8 94       	cli
	Shift_flag =2;
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	sei();
  ee:	78 94       	sei
}
  f0:	8f 91       	pop	r24
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <main>:
int main(void)
{
	unsigned char LED_Data = 0x01;
	
	DDRC = 0xfF; //0000 1111
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	84 bb       	out	0x14, r24	; 20
	DDRE = 0x00;
 100:	12 b8       	out	0x02, r1	; 2
	
	EICRB = 0xC8;
 102:	88 ec       	ldi	r24, 0xC8	; 200
 104:	8a bf       	out	0x3a, r24	; 58
	EIMSK = 0xA0;
 106:	80 ea       	ldi	r24, 0xA0	; 160
 108:	89 bf       	out	0x39, r24	; 57
	EIFR = 0xA0;
 10a:	88 bf       	out	0x38, r24	; 56
	sei();
 10c:	78 94       	sei
	Shift_flag =2;
	sei();
}
int main(void)
{
	unsigned char LED_Data = 0x01;
 10e:	81 e0       	ldi	r24, 0x01	; 1
	EIMSK = 0xA0;
	EIFR = 0xA0;
	sei();
	while(1)
	{
		PORTC = LED_Data;
 110:	85 bb       	out	0x15, r24	; 21
		if(Shift_flag == 1)
 112:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 116:	91 30       	cpi	r25, 0x01	; 1
 118:	21 f4       	brne	.+8      	; 0x122 <main+0x26>
		{
			if(LED_Data == 0x80)LED_Data =0x01;
 11a:	80 38       	cpi	r24, 0x80	; 128
 11c:	51 f0       	breq	.+20     	; 0x132 <main+0x36>
			else LED_Data <<= 1;
 11e:	88 0f       	add	r24, r24
 120:	09 c0       	rjmp	.+18     	; 0x134 <main+0x38>
		}
		else if(Shift_flag ==2)
 122:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 126:	92 30       	cpi	r25, 0x02	; 2
 128:	29 f4       	brne	.+10     	; 0x134 <main+0x38>
		{
			if(LED_Data == 0x01) LED_Data == 0x80;
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	19 f0       	breq	.+6      	; 0x134 <main+0x38>
			else LED_Data >>= 1;
 12e:	86 95       	lsr	r24
 130:	01 c0       	rjmp	.+2      	; 0x134 <main+0x38>
	while(1)
	{
		PORTC = LED_Data;
		if(Shift_flag == 1)
		{
			if(LED_Data == 0x80)LED_Data =0x01;
 132:	81 e0       	ldi	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	2f e0       	ldi	r18, 0x0F	; 15
 136:	3e ec       	ldi	r19, 0xCE	; 206
 138:	96 e0       	ldi	r25, 0x06	; 6
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	30 40       	sbci	r19, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0x3e>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0x48>
 144:	00 00       	nop
 146:	e4 cf       	rjmp	.-56     	; 0x110 <main+0x14>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
