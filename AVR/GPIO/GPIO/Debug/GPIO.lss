
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000192  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008cb  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000081e  00000000  00000000  00000af7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e9  00000000  00000000  00001315  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001600  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fc  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000005b  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001a9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4c c0       	rjmp	.+152    	; 0xae <__vector_5>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	1a d0       	rcall	.+52     	; 0xde <main>
  aa:	37 c0       	rjmp	.+110    	; 0x11a <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_5>:
#include <avr/interrupt.h> // AVR 인터럽트에 대한 헤더파일
#include <util/delay.h> // delay 함수사용을 위한 헤더파일
volatile unsigned char Time_STOP = 0;

	SIGNAL(INT4_vect) // 인터럽트 서비스 루틴
	{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
		cli(); // 전체 인터럽트를 금지
  ba:	f8 94       	cli
		if(Time_STOP == 0) // Time_Stop이 0인 경우
  bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c0:	81 11       	cpse	r24, r1
  c2:	04 c0       	rjmp	.+8      	; 0xcc <__vector_5+0x1e>
		{
			Time_STOP = 1; // Time_Stop에 1을 입력
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__vector_5+0x22>
		}
		else // Time_Stop이 1인 경우
		{
			Time_STOP = 0; // Time_Stop에 0을 입력
  cc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		sei(); // 전체 인터럽트를 허용
  d0:	78 94       	sei
	}
  d2:	8f 91       	pop	r24
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <main>:
	
int main(void) {
	unsigned char LED_Data = 0x01;
	DDRA = 0xFF; // 포트C 를 출력포트로 설정
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	8a bb       	out	0x1a, r24	; 26
	DDRE = 0x00; // 포트E 를 입력포트로 설정
  e2:	12 b8       	out	0x02, r1	; 2
	
	EICRA = 0x03; // 인터럽트 4를 상승엣지에서 동작하도록 설정
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK = 0x02; // 인터럽트 4를 허용
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	89 bf       	out	0x39, r24	; 57
	//EIFR = 0x10; // 인터럽트 4 플래그를 클리어
	sei(); // 전체 인터럽트를 허용
  ee:	78 94       	sei
		}
		sei(); // 전체 인터럽트를 허용
	}
	
int main(void) {
	unsigned char LED_Data = 0x01;
  f0:	81 e0       	ldi	r24, 0x01	; 1
	//EIFR = 0x10; // 인터럽트 4 플래그를 클리어
	sei(); // 전체 인터럽트를 허용
	
	while (1)
	{
		PORTA = LED_Data; // 포트C로 변수 LED_Data에 있는 데이타 출력
  f2:	8b bb       	out	0x1b, r24	; 27
		if(Time_STOP == 0) // Time_Stop이 0인 경우
  f4:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f8:	91 11       	cpse	r25, r1
  fa:	05 c0       	rjmp	.+10     	; 0x106 <main+0x28>
		{
			if(LED_Data == 0x80) LED_Data = 0x01;
  fc:	80 38       	cpi	r24, 0x80	; 128
  fe:	11 f0       	breq	.+4      	; 0x104 <main+0x26>
			// LED_Data 값이 0x80이면 LED_Data 값을 0x01로 함
			else LED_Data <<= 1; // LED_Data 값을 왼쪽으로 쉬프트
 100:	88 0f       	add	r24, r24
 102:	01 c0       	rjmp	.+2      	; 0x106 <main+0x28>
	while (1)
	{
		PORTA = LED_Data; // 포트C로 변수 LED_Data에 있는 데이타 출력
		if(Time_STOP == 0) // Time_Stop이 0인 경우
		{
			if(LED_Data == 0x80) LED_Data = 0x01;
 104:	81 e0       	ldi	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	2f ea       	ldi	r18, 0xAF	; 175
 108:	34 e4       	ldi	r19, 0x44	; 68
 10a:	92 e0       	ldi	r25, 0x02	; 2
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	30 40       	sbci	r19, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x2e>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x38>
 116:	00 00       	nop
 118:	ec cf       	rjmp	.-40     	; 0xf2 <main+0x14>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
