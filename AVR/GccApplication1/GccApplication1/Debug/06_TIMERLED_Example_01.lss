
06_TIMERLED_Example_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000002d8  0000034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000985  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000896  00000000  00000000  00000d85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000394  00000000  00000000  0000161b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000019b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000433  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000092  00000000  00000000  00001e27  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001eb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ed       	ldi	r30, 0xD8	; 216
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	10 d0       	rcall	.+32     	; 0xd4 <main>
  b4:	0f c1       	rjmp	.+542    	; 0x2d4 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <putct>:
int Num[8]={0,1,2,3,4,5,6,7};


void putct(unsigned char data)
{
	while((UCSR0A & 0x20) == 0);			//전송대기
  b8:	5d 9b       	sbis	0x0b, 5	; 11
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <putct>
	UDR0 = data;							//데이터 전송
  bc:	8c b9       	out	0x0c, r24	; 12
	UCSR0A |=0x20;							// UCSR0A 레지스터 중에서 5번째 비트(UDREn) 를 세트하여 UDRE0를 클리어 함. */ 0010 0000
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	8b b9       	out	0x0b, r24	; 11
  c4:	08 95       	ret

000000c6 <getch>:
	}
	
	unsigned char getch()
	{
	unsigned char data;
	while((UCSR0A & 0x80) == 0);				// 송신 대기
  c6:	5f 9b       	sbis	0x0b, 7	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <getch>
	data = UDR0;							// 송신된 데이터 저장
  ca:	8c b1       	in	r24, 0x0c	; 12
	UCSR0A |= 0x80;							// 7번째 비트 세트
  cc:	9b b1       	in	r25, 0x0b	; 11
  ce:	90 68       	ori	r25, 0x80	; 128
  d0:	9b b9       	out	0x0b, r25	; 11
	return data;							//데이터 반환
	}
  d2:	08 95       	ret

000000d4 <main>:

	int main(void)
	{
	//DDRE = 0x08; // 포트E PE3를 출력 나머지는 입력포트로 설정한다.
	
	DDRE = 0xfe;			//E포트 사용, Rx(입력0), Tx(출력 1)
  d4:	8e ef       	ldi	r24, 0xFE	; 254
  d6:	82 b9       	out	0x02, r24	; 2

	UCSR0A = 0x00;
  d8:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0x18;		// Rx, Tx enable
  da:	88 e1       	ldi	r24, 0x18	; 24
  dc:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06;		// 비동기 방식, No Parity bit, 1 Stop bit
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0H = 0x00;
  e4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 3;		// 115200 bps
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	89 b9       	out	0x09, r24	; 9
	
	TCCR3A = 0x00; // WGM3(1:0) = “00”
  ec:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = 0x19; // WGM3(3:2) = “11” , CS3(2:0) = “001” 1분주 사용
  f0:	89 e1       	ldi	r24, 0x19	; 25
  f2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	TCCR3C = 0x00; // WGM3(3:0) = “1110”, Fast PWM, 모드 14
  f6:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
	
	TCNT3 = 0x0000; // 타이머3 카운터 초기화
  fa:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  fe:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>


	
	while(1)
	{
	unsigned char dat = getch();
 102:	e1 df       	rcall	.-62     	; 0xc6 <getch>
 104:	c8 2f       	mov	r28, r24
	putct(dat);
 106:	d8 df       	rcall	.-80     	; 0xb8 <putct>
 108:	c0 33       	cpi	r28, 0x30	; 48
		
	if(dat==48)
 10a:	81 f4       	brne	.+32     	; 0x12c <main+0x58>
 10c:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <DoReMi>
	{
	ICR3 = 7372800/DoReMi[0]/8; // 도의 음향을 연주한다
 110:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <DoReMi+0x1>
 114:	40 e0       	ldi	r20, 0x00	; 0
 116:	50 e0       	ldi	r21, 0x00	; 0
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	70 e1       	ldi	r23, 0x10	; 16
 11c:	8e e0       	ldi	r24, 0x0E	; 14
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	9b d0       	rcall	.+310    	; 0x258 <__divmodsi4>
 122:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 126:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 12a:	7d c0       	rjmp	.+250    	; 0x226 <main+0x152>
 12c:	c1 33       	cpi	r28, 0x31	; 49
	}
	else if(dat ==49)
 12e:	81 f4       	brne	.+32     	; 0x150 <main+0x7c>
 130:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <DoReMi+0x2>
	{
	ICR3 = 7372800/DoReMi[1]/8; // 도의 음향을 연주한다
 134:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <DoReMi+0x3>
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	70 e1       	ldi	r23, 0x10	; 16
 140:	8e e0       	ldi	r24, 0x0E	; 14
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	89 d0       	rcall	.+274    	; 0x258 <__divmodsi4>
 146:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 14a:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 14e:	6b c0       	rjmp	.+214    	; 0x226 <main+0x152>
 150:	c2 33       	cpi	r28, 0x32	; 50
	}
	else if(dat ==50)
 152:	81 f4       	brne	.+32     	; 0x174 <main+0xa0>
 154:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <DoReMi+0x4>
	{
	ICR3 = 7372800/DoReMi[2]/8; // 도의 음향을 연주한다
 158:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <DoReMi+0x5>
 15c:	40 e0       	ldi	r20, 0x00	; 0
 15e:	50 e0       	ldi	r21, 0x00	; 0
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	70 e1       	ldi	r23, 0x10	; 16
 164:	8e e0       	ldi	r24, 0x0E	; 14
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	77 d0       	rcall	.+238    	; 0x258 <__divmodsi4>
 16a:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 16e:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 172:	59 c0       	rjmp	.+178    	; 0x226 <main+0x152>
 174:	c3 33       	cpi	r28, 0x33	; 51
	}
	else if(dat ==51)
 176:	81 f4       	brne	.+32     	; 0x198 <main+0xc4>
 178:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <DoReMi+0x6>
	{
	ICR3 = 7372800/DoReMi[3]/8; // 도의 음향을 연주한다
 17c:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <DoReMi+0x7>
 180:	40 e0       	ldi	r20, 0x00	; 0
 182:	50 e0       	ldi	r21, 0x00	; 0
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	70 e1       	ldi	r23, 0x10	; 16
 188:	8e e0       	ldi	r24, 0x0E	; 14
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	65 d0       	rcall	.+202    	; 0x258 <__divmodsi4>
 18e:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 192:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 196:	47 c0       	rjmp	.+142    	; 0x226 <main+0x152>
 198:	c4 33       	cpi	r28, 0x34	; 52
	}
	else if(dat ==52)
 19a:	81 f4       	brne	.+32     	; 0x1bc <main+0xe8>
 19c:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <DoReMi+0x8>
	{
	ICR3 = 7372800/DoReMi[4]/8; // 도의 음향을 연주한다
 1a0:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <DoReMi+0x9>
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	70 e1       	ldi	r23, 0x10	; 16
 1ac:	8e e0       	ldi	r24, 0x0E	; 14
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	53 d0       	rcall	.+166    	; 0x258 <__divmodsi4>
 1b2:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1b6:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 1ba:	35 c0       	rjmp	.+106    	; 0x226 <main+0x152>
 1bc:	c5 33       	cpi	r28, 0x35	; 53
	}
	else if(dat ==53)
 1be:	81 f4       	brne	.+32     	; 0x1e0 <main+0x10c>
 1c0:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <DoReMi+0xa>
	{
	ICR3 = 7372800/DoReMi[5]/8; // 도의 음향을 연주한다
 1c4:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <DoReMi+0xb>
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	70 e1       	ldi	r23, 0x10	; 16
 1d0:	8e e0       	ldi	r24, 0x0E	; 14
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	41 d0       	rcall	.+130    	; 0x258 <__divmodsi4>
 1d6:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1da:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 1de:	23 c0       	rjmp	.+70     	; 0x226 <main+0x152>
 1e0:	c6 33       	cpi	r28, 0x36	; 54
	}
	else if(dat ==54)
 1e2:	81 f4       	brne	.+32     	; 0x204 <main+0x130>
 1e4:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <DoReMi+0xc>
	{
	ICR3 = 7372800/DoReMi[6]/8; // 도의 음향을 연주한다
 1e8:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <DoReMi+0xd>
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	70 e1       	ldi	r23, 0x10	; 16
 1f4:	8e e0       	ldi	r24, 0x0E	; 14
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	2f d0       	rcall	.+94     	; 0x258 <__divmodsi4>
 1fa:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1fe:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 202:	11 c0       	rjmp	.+34     	; 0x226 <main+0x152>
 204:	c7 33       	cpi	r28, 0x37	; 55
	}
	else if(dat ==55)
 206:	79 f4       	brne	.+30     	; 0x226 <main+0x152>
 208:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <DoReMi+0xe>
	{
	ICR3 = 7372800/DoReMi[7]/8; // 도의 음향을 연주한다
 20c:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <DoReMi+0xf>
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	70 e1       	ldi	r23, 0x10	; 16
 218:	8e e0       	ldi	r24, 0x0E	; 14
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	1d d0       	rcall	.+58     	; 0x258 <__divmodsi4>
 21e:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 222:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 226:	80 e4       	ldi	r24, 0x40	; 64
	}

	
	TCCR3A = 0x40; // PE4로 출력
 228:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 22c:	81 e0       	ldi	r24, 0x01	; 1
	sound_flag = 1; // 부저 음이 발생하도록 설정
 22e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 232:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	if(sound_flag)
 236:	88 23       	and	r24, r24
 238:	09 f4       	brne	.+2      	; 0x23c <main+0x168>
 23a:	63 cf       	rjmp	.-314    	; 0x102 <main+0x2e>
 23c:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23e:	8f e7       	ldi	r24, 0x7F	; 127
 240:	94 e0       	ldi	r25, 0x04	; 4
 242:	21 50       	subi	r18, 0x01	; 1
 244:	80 40       	sbci	r24, 0x00	; 0
 246:	90 40       	sbci	r25, 0x00	; 0
 248:	e1 f7       	brne	.-8      	; 0x242 <main+0x16e>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <main+0x178>
 24c:	00 00       	nop
 24e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	{
	_delay_ms(200); 
	TCCR3A = 0x00; // 부저 소리를 끈다.
 252:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	sound_flag = 0;
 256:	55 cf       	rjmp	.-342    	; 0x102 <main+0x2e>

00000258 <__divmodsi4>:
 258:	05 2e       	mov	r0, r21
 25a:	97 fb       	bst	r25, 7
 25c:	16 f4       	brtc	.+4      	; 0x262 <__divmodsi4+0xa>
 25e:	00 94       	com	r0
 260:	0f d0       	rcall	.+30     	; 0x280 <__negsi2>
 262:	57 fd       	sbrc	r21, 7
 264:	05 d0       	rcall	.+10     	; 0x270 <__divmodsi4_neg2>
 266:	14 d0       	rcall	.+40     	; 0x290 <__udivmodsi4>
 268:	07 fc       	sbrc	r0, 7
 26a:	02 d0       	rcall	.+4      	; 0x270 <__divmodsi4_neg2>
 26c:	46 f4       	brtc	.+16     	; 0x27e <__divmodsi4_exit>
 26e:	08 c0       	rjmp	.+16     	; 0x280 <__negsi2>

00000270 <__divmodsi4_neg2>:
 270:	50 95       	com	r21
 272:	40 95       	com	r20
 274:	30 95       	com	r19
 276:	21 95       	neg	r18
 278:	3f 4f       	sbci	r19, 0xFF	; 255
 27a:	4f 4f       	sbci	r20, 0xFF	; 255
 27c:	5f 4f       	sbci	r21, 0xFF	; 255

0000027e <__divmodsi4_exit>:
 27e:	08 95       	ret

00000280 <__negsi2>:
 280:	90 95       	com	r25
 282:	80 95       	com	r24
 284:	70 95       	com	r23
 286:	61 95       	neg	r22
 288:	7f 4f       	sbci	r23, 0xFF	; 255
 28a:	8f 4f       	sbci	r24, 0xFF	; 255
 28c:	9f 4f       	sbci	r25, 0xFF	; 255
 28e:	08 95       	ret

00000290 <__udivmodsi4>:
 290:	a1 e2       	ldi	r26, 0x21	; 33
 292:	1a 2e       	mov	r1, r26
 294:	aa 1b       	sub	r26, r26
 296:	bb 1b       	sub	r27, r27
 298:	fd 01       	movw	r30, r26
 29a:	0d c0       	rjmp	.+26     	; 0x2b6 <__udivmodsi4_ep>

0000029c <__udivmodsi4_loop>:
 29c:	aa 1f       	adc	r26, r26
 29e:	bb 1f       	adc	r27, r27
 2a0:	ee 1f       	adc	r30, r30
 2a2:	ff 1f       	adc	r31, r31
 2a4:	a2 17       	cp	r26, r18
 2a6:	b3 07       	cpc	r27, r19
 2a8:	e4 07       	cpc	r30, r20
 2aa:	f5 07       	cpc	r31, r21
 2ac:	20 f0       	brcs	.+8      	; 0x2b6 <__udivmodsi4_ep>
 2ae:	a2 1b       	sub	r26, r18
 2b0:	b3 0b       	sbc	r27, r19
 2b2:	e4 0b       	sbc	r30, r20
 2b4:	f5 0b       	sbc	r31, r21

000002b6 <__udivmodsi4_ep>:
 2b6:	66 1f       	adc	r22, r22
 2b8:	77 1f       	adc	r23, r23
 2ba:	88 1f       	adc	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	1a 94       	dec	r1
 2c0:	69 f7       	brne	.-38     	; 0x29c <__udivmodsi4_loop>
 2c2:	60 95       	com	r22
 2c4:	70 95       	com	r23
 2c6:	80 95       	com	r24
 2c8:	90 95       	com	r25
 2ca:	9b 01       	movw	r18, r22
 2cc:	ac 01       	movw	r20, r24
 2ce:	bd 01       	movw	r22, r26
 2d0:	cf 01       	movw	r24, r30
 2d2:	08 95       	ret

000002d4 <_exit>:
 2d4:	f8 94       	cli

000002d6 <__stop_program>:
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <__stop_program>
