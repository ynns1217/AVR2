
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000002b8  0000032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001040  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000979  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000532  00000000  00000000  00001dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00002308  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000468  00000000  00000000  000023dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000525  00000000  00000000  00002844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002d69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 eb       	ldi	r30, 0xB8	; 184
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	87 d0       	rcall	.+270    	; 0x1c2 <main>
  b4:	ff c0       	rjmp	.+510    	; 0x2b4 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <Lcd_Data>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	e5 e6       	ldi	r30, 0x65	; 101
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	90 81       	ld	r25, Z
  be:	91 60       	ori	r25, 0x01	; 1
  c0:	90 83       	st	Z, r25
  c2:	90 81       	ld	r25, Z
  c4:	9d 7f       	andi	r25, 0xFD	; 253
  c6:	90 83       	st	Z, r25
  c8:	90 81       	ld	r25, Z
  ca:	94 60       	ori	r25, 0x04	; 4
  cc:	90 83       	st	Z, r25
  ce:	90 e1       	ldi	r25, 0x10	; 16
  d0:	9a 95       	dec	r25
  d2:	f1 f7       	brne	.-4      	; 0xd0 <Lcd_Data+0x18>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <Lcd_Data+0x1e>
  d6:	8b bb       	out	0x1b, r24	; 27
  d8:	80 e1       	ldi	r24, 0x10	; 16
  da:	8a 95       	dec	r24
  dc:	f1 f7       	brne	.-4      	; 0xda <Lcd_Data+0x22>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <Lcd_Data+0x28>
  e0:	80 81       	ld	r24, Z
  e2:	8b 7f       	andi	r24, 0xFB	; 251
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <Lcd_Cmd>:
  e8:	e5 e6       	ldi	r30, 0x65	; 101
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	90 81       	ld	r25, Z
  ee:	9e 7f       	andi	r25, 0xFE	; 254
  f0:	90 83       	st	Z, r25
  f2:	90 81       	ld	r25, Z
  f4:	9d 7f       	andi	r25, 0xFD	; 253
  f6:	90 83       	st	Z, r25
  f8:	90 81       	ld	r25, Z
  fa:	94 60       	ori	r25, 0x04	; 4
  fc:	90 83       	st	Z, r25
  fe:	90 e1       	ldi	r25, 0x10	; 16
 100:	9a 95       	dec	r25
 102:	f1 f7       	brne	.-4      	; 0x100 <Lcd_Cmd+0x18>
 104:	00 c0       	rjmp	.+0      	; 0x106 <Lcd_Cmd+0x1e>
 106:	8b bb       	out	0x1b, r24	; 27
 108:	80 e1       	ldi	r24, 0x10	; 16
 10a:	8a 95       	dec	r24
 10c:	f1 f7       	brne	.-4      	; 0x10a <Lcd_Cmd+0x22>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <Lcd_Cmd+0x28>
 110:	80 81       	ld	r24, Z
 112:	8b 7f       	andi	r24, 0xFB	; 251
 114:	80 83       	st	Z, r24
 116:	08 95       	ret

00000118 <Lcd_CHAR>:
 118:	cf df       	rcall	.-98     	; 0xb8 <Lcd_Data>
 11a:	89 ef       	ldi	r24, 0xF9	; 249
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <Lcd_CHAR+0x6>
 122:	00 c0       	rjmp	.+0      	; 0x124 <Lcd_CHAR+0xc>
 124:	00 00       	nop
 126:	08 95       	ret

00000128 <Lcd_STR>:
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	ec 01       	movw	r28, r24
 12e:	02 c0       	rjmp	.+4      	; 0x134 <Lcd_STR+0xc>
 130:	f3 df       	rcall	.-26     	; 0x118 <Lcd_CHAR>
 132:	21 96       	adiw	r28, 0x01	; 1
 134:	88 81       	ld	r24, Y
 136:	81 11       	cpse	r24, r1
 138:	fb cf       	rjmp	.-10     	; 0x130 <Lcd_STR+0x8>
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <Lcd_Pos>:
 140:	90 e4       	ldi	r25, 0x40	; 64
 142:	89 9f       	mul	r24, r25
 144:	60 0d       	add	r22, r0
 146:	11 24       	eor	r1, r1
 148:	86 2f       	mov	r24, r22
 14a:	80 68       	ori	r24, 0x80	; 128
 14c:	cd df       	rcall	.-102    	; 0xe8 <Lcd_Cmd>
 14e:	81 ee       	ldi	r24, 0xE1	; 225
 150:	94 e0       	ldi	r25, 0x04	; 4
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <Lcd_Pos+0x12>
 156:	00 c0       	rjmp	.+0      	; 0x158 <Lcd_Pos+0x18>
 158:	00 00       	nop
 15a:	08 95       	ret

0000015c <Lcd_Clear>:
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	c4 df       	rcall	.-120    	; 0xe8 <Lcd_Cmd>
 160:	83 ec       	ldi	r24, 0xC3	; 195
 162:	99 e0       	ldi	r25, 0x09	; 9
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <Lcd_Clear+0x8>
 168:	00 c0       	rjmp	.+0      	; 0x16a <Lcd_Clear+0xe>
 16a:	00 00       	nop
 16c:	08 95       	ret

0000016e <Lcd_Init>:
	}
}

void Lcd_Init(void)
{
	Lcd_Cmd(0x38);
 16e:	88 e3       	ldi	r24, 0x38	; 56
 170:	bb df       	rcall	.-138    	; 0xe8 <Lcd_Cmd>
 172:	83 ef       	ldi	r24, 0xF3	; 243
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <Lcd_Init+0x8>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <Lcd_Init+0xe>
 17c:	00 00       	nop
	_delay_ms(2);	//명령어를 IR에 쓰고나면 40us 또는 1.64ms을 기다림.
	Lcd_Cmd(0x38);
 17e:	88 e3       	ldi	r24, 0x38	; 56
 180:	b3 df       	rcall	.-154    	; 0xe8 <Lcd_Cmd>
 182:	83 ef       	ldi	r24, 0xF3	; 243
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <Lcd_Init+0x18>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <Lcd_Init+0x1e>
	_delay_ms(2);
	Lcd_Cmd(0x38);
 18c:	00 00       	nop
 18e:	88 e3       	ldi	r24, 0x38	; 56
 190:	ab df       	rcall	.-170    	; 0xe8 <Lcd_Cmd>
 192:	83 ef       	ldi	r24, 0xF3	; 243
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <Lcd_Init+0x28>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <Lcd_Init+0x2e>
	_delay_ms(2);
	Lcd_Cmd(0x0c);
 19c:	00 00       	nop
 19e:	8c e0       	ldi	r24, 0x0C	; 12
 1a0:	a3 df       	rcall	.-186    	; 0xe8 <Lcd_Cmd>
 1a2:	83 ef       	ldi	r24, 0xF3	; 243
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <Lcd_Init+0x38>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <Lcd_Init+0x3e>
	_delay_ms(2);
	Lcd_Cmd(0x06);
 1ac:	00 00       	nop
 1ae:	86 e0       	ldi	r24, 0x06	; 6
 1b0:	9b df       	rcall	.-202    	; 0xe8 <Lcd_Cmd>
 1b2:	83 ef       	ldi	r24, 0xF3	; 243
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <Lcd_Init+0x48>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <Lcd_Init+0x4e>
	_delay_ms(2);
	Lcd_Clear();
 1bc:	00 00       	nop
 1be:	ce cf       	rjmp	.-100    	; 0x15c <Lcd_Clear>
 1c0:	08 95       	ret

000001c2 <main>:
#include <avr/io.h>
#include <avr/delay.h>
#include "Lcd.h"

int main()
{
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	cd b7       	in	r28, 0x3d	; 61
 1c8:	de b7       	in	r29, 0x3e	; 62
 1ca:	e0 97       	sbiw	r28, 0x30	; 48
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	f8 94       	cli
 1d0:	de bf       	out	0x3e, r29	; 62
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	cd bf       	out	0x3d, r28	; 61

int i =2;
int j =4;
int b =0;
	
	DDRA = 0xFF;		//포트A를 출력포트로 지정
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	8a bb       	out	0x1a, r24	; 26
	DDRG = 0xFF;
 1da:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	Lcd_Init();		//lcd 초기화
 1de:	c7 df       	rcall	.-114    	; 0x16e <Lcd_Init>
	Lcd_Clear();
 1e0:	bd df       	rcall	.-134    	; 0x15c <Lcd_Clear>
	Lcd_Clear();
 1e2:	bc df       	rcall	.-136    	; 0x15c <Lcd_Clear>
 1e4:	4a e0       	ldi	r20, 0x0A	; 10
		//b = i*j;
		//itoa(b,str1,10);
	//}
//}
		b = i*j;
itoa(i,str2,10);
 1e6:	50 e0       	ldi	r21, 0x00	; 0
 1e8:	be 01       	movw	r22, r28
 1ea:	6f 5e       	subi	r22, 0xEF	; 239
 1ec:	7f 4f       	sbci	r23, 0xFF	; 255
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	23 d0       	rcall	.+70     	; 0x23a <itoa>
 1f4:	4a e0       	ldi	r20, 0x0A	; 10
itoa(j,str3,10);
 1f6:	50 e0       	ldi	r21, 0x00	; 0
 1f8:	be 01       	movw	r22, r28
 1fa:	6f 5d       	subi	r22, 0xDF	; 223
 1fc:	7f 4f       	sbci	r23, 0xFF	; 255
 1fe:	84 e0       	ldi	r24, 0x04	; 4
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	1b d0       	rcall	.+54     	; 0x23a <itoa>
 204:	4a e0       	ldi	r20, 0x0A	; 10
itoa(b,str1,10);
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	be 01       	movw	r22, r28
 20a:	6f 5f       	subi	r22, 0xFF	; 255
 20c:	7f 4f       	sbci	r23, 0xFF	; 255
 20e:	88 e0       	ldi	r24, 0x08	; 8
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	13 d0       	rcall	.+38     	; 0x23a <itoa>
			//}
		//}



		Lcd_Pos(0,0);
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	93 df       	rcall	.-218    	; 0x140 <Lcd_Pos>
		Lcd_STR(str2);
 21a:	ce 01       	movw	r24, r28
 21c:	41 96       	adiw	r24, 0x11	; 17
 21e:	84 df       	rcall	.-248    	; 0x128 <Lcd_STR>
		Lcd_STR(str4);
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	81 df       	rcall	.-254    	; 0x128 <Lcd_STR>
		Lcd_STR(str3);
 226:	ce 01       	movw	r24, r28
 228:	81 96       	adiw	r24, 0x21	; 33
 22a:	7e df       	rcall	.-260    	; 0x128 <Lcd_STR>
 22c:	84 e0       	ldi	r24, 0x04	; 4
		Lcd_STR(str5);
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	7b df       	rcall	.-266    	; 0x128 <Lcd_STR>
 232:	ce 01       	movw	r24, r28
 234:	01 96       	adiw	r24, 0x01	; 1
		Lcd_STR(str1);
 236:	78 df       	rcall	.-272    	; 0x128 <Lcd_STR>
 238:	ed cf       	rjmp	.-38     	; 0x214 <main+0x52>

0000023a <itoa>:
 23a:	45 32       	cpi	r20, 0x25	; 37
 23c:	51 05       	cpc	r21, r1
 23e:	18 f4       	brcc	.+6      	; 0x246 <itoa+0xc>
 240:	42 30       	cpi	r20, 0x02	; 2
 242:	08 f0       	brcs	.+2      	; 0x246 <itoa+0xc>
 244:	04 c0       	rjmp	.+8      	; 0x24e <__itoa_ncheck>
 246:	fb 01       	movw	r30, r22
 248:	10 82       	st	Z, r1
 24a:	cb 01       	movw	r24, r22
 24c:	08 95       	ret

0000024e <__itoa_ncheck>:
 24e:	bb 27       	eor	r27, r27
 250:	4a 30       	cpi	r20, 0x0A	; 10
 252:	31 f4       	brne	.+12     	; 0x260 <__itoa_ncheck+0x12>
 254:	99 23       	and	r25, r25
 256:	22 f4       	brpl	.+8      	; 0x260 <__itoa_ncheck+0x12>
 258:	bd e2       	ldi	r27, 0x2D	; 45
 25a:	90 95       	com	r25
 25c:	81 95       	neg	r24
 25e:	9f 4f       	sbci	r25, 0xFF	; 255
 260:	01 c0       	rjmp	.+2      	; 0x264 <__utoa_common>

00000262 <__utoa_ncheck>:
 262:	bb 27       	eor	r27, r27

00000264 <__utoa_common>:
 264:	fb 01       	movw	r30, r22
 266:	55 27       	eor	r21, r21
 268:	aa 27       	eor	r26, r26
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	aa 1f       	adc	r26, r26
 270:	a4 17       	cp	r26, r20
 272:	10 f0       	brcs	.+4      	; 0x278 <__utoa_common+0x14>
 274:	a4 1b       	sub	r26, r20
 276:	83 95       	inc	r24
 278:	50 51       	subi	r21, 0x10	; 16
 27a:	b9 f7       	brne	.-18     	; 0x26a <__utoa_common+0x6>
 27c:	a0 5d       	subi	r26, 0xD0	; 208
 27e:	aa 33       	cpi	r26, 0x3A	; 58
 280:	08 f0       	brcs	.+2      	; 0x284 <__utoa_common+0x20>
 282:	a9 5d       	subi	r26, 0xD9	; 217
 284:	a1 93       	st	Z+, r26
 286:	00 97       	sbiw	r24, 0x00	; 0
 288:	79 f7       	brne	.-34     	; 0x268 <__utoa_common+0x4>
 28a:	b1 11       	cpse	r27, r1
 28c:	b1 93       	st	Z+, r27
 28e:	11 92       	st	Z+, r1
 290:	cb 01       	movw	r24, r22
 292:	00 c0       	rjmp	.+0      	; 0x294 <strrev>

00000294 <strrev>:
 294:	dc 01       	movw	r26, r24
 296:	fc 01       	movw	r30, r24
 298:	67 2f       	mov	r22, r23
 29a:	71 91       	ld	r23, Z+
 29c:	77 23       	and	r23, r23
 29e:	e1 f7       	brne	.-8      	; 0x298 <strrev+0x4>
 2a0:	32 97       	sbiw	r30, 0x02	; 2
 2a2:	04 c0       	rjmp	.+8      	; 0x2ac <strrev+0x18>
 2a4:	7c 91       	ld	r23, X
 2a6:	6d 93       	st	X+, r22
 2a8:	70 83       	st	Z, r23
 2aa:	62 91       	ld	r22, -Z
 2ac:	ae 17       	cp	r26, r30
 2ae:	bf 07       	cpc	r27, r31
 2b0:	c8 f3       	brcs	.-14     	; 0x2a4 <strrev+0x10>
 2b2:	08 95       	ret

000002b4 <_exit>:
 2b4:	f8 94       	cli

000002b6 <__stop_program>:
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <__stop_program>
