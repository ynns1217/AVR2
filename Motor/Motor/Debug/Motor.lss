
Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000174  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000969  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000817  00000000  00000000  00000bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000384  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001764  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003eb  00000000  00000000  00001798  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000130  00000000  00000000  00001b83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001cb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	61 d0       	rcall	.+194    	; 0x15c <main>
  9a:	6a c0       	rjmp	.+212    	; 0x170 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <keyScan>:
		
}

unsigned char keyScan()
{
		PORTA = 0xF7;								//0b 1111 0111 ->
  9e:	87 ef       	ldi	r24, 0xF7	; 247
  a0:	8b bb       	out	0x1b, r24	; 27
			if(PINA == 0xF6) return '1';				//0b 1111 0110
  a2:	89 b3       	in	r24, 0x19	; 25
  a4:	86 3f       	cpi	r24, 0xF6	; 246
  a6:	09 f4       	brne	.+2      	; 0xaa <keyScan+0xc>
  a8:	41 c0       	rjmp	.+130    	; 0x12c <keyScan+0x8e>
			else if (PINA == 0xFD) return '2';			//0b 1111 1101
  aa:	89 b3       	in	r24, 0x19	; 25
  ac:	8d 3f       	cpi	r24, 0xFD	; 253
  ae:	09 f4       	brne	.+2      	; 0xb2 <keyScan+0x14>
  b0:	3f c0       	rjmp	.+126    	; 0x130 <keyScan+0x92>
			else if(PINA == 0xFB) return '3';			//0b 1111 1011
  b2:	89 b3       	in	r24, 0x19	; 25
  b4:	8b 3f       	cpi	r24, 0xFB	; 251
  b6:	f1 f1       	breq	.+124    	; 0x134 <keyScan+0x96>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	97 e4       	ldi	r25, 0x47	; 71
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <keyScan+0x1e>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <keyScan+0x24>
  c2:	00 00       	nop
			_delay_ms(10);
		
		PORTA = 0xEF;								//0b 1110 1111 ->
  c4:	8f ee       	ldi	r24, 0xEF	; 239
  c6:	8b bb       	out	0x1b, r24	; 27
			if(PINA == 0xFE)	return '4';				//0b 1111 1110
  c8:	89 b3       	in	r24, 0x19	; 25
  ca:	8e 3f       	cpi	r24, 0xFE	; 254
  cc:	a9 f1       	breq	.+106    	; 0x138 <keyScan+0x9a>
			else if (PINA == 0xFD) return '5';			//0b 1111 1101
  ce:	89 b3       	in	r24, 0x19	; 25
  d0:	8d 3f       	cpi	r24, 0xFD	; 253
  d2:	a1 f1       	breq	.+104    	; 0x13c <keyScan+0x9e>
			else if(PINA == 0xFB) return '6';			//0b 1111 1011
  d4:	89 b3       	in	r24, 0x19	; 25
  d6:	8b 3f       	cpi	r24, 0xFB	; 251
  d8:	99 f1       	breq	.+102    	; 0x140 <keyScan+0xa2>
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	97 e4       	ldi	r25, 0x47	; 71
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <keyScan+0x40>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <keyScan+0x46>
  e4:	00 00       	nop
			_delay_ms(10);
		
		PORTA = 0xDF;								//0b 1101 1111 ->
  e6:	8f ed       	ldi	r24, 0xDF	; 223
  e8:	8b bb       	out	0x1b, r24	; 27
			if(PINA == 0xFE) return '7';				//0b 1111 1110
  ea:	89 b3       	in	r24, 0x19	; 25
  ec:	8e 3f       	cpi	r24, 0xFE	; 254
  ee:	51 f1       	breq	.+84     	; 0x144 <keyScan+0xa6>
			else if (PINA == 0xFD) return '8';			//0b 1111 1101
  f0:	89 b3       	in	r24, 0x19	; 25
  f2:	8d 3f       	cpi	r24, 0xFD	; 253
  f4:	49 f1       	breq	.+82     	; 0x148 <keyScan+0xaa>
			else if(PINA == 0xFB) return '9';			//0b 1111 1011
  f6:	89 b3       	in	r24, 0x19	; 25
  f8:	8b 3f       	cpi	r24, 0xFB	; 251
  fa:	41 f1       	breq	.+80     	; 0x14c <keyScan+0xae>
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	97 e4       	ldi	r25, 0x47	; 71
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <keyScan+0x62>
 104:	00 c0       	rjmp	.+0      	; 0x106 <keyScan+0x68>
 106:	00 00       	nop
			_delay_ms(10);
		
		PORTA = 0xBF;								//0b 1011 1111 ->
 108:	8f eb       	ldi	r24, 0xBF	; 191
 10a:	8b bb       	out	0x1b, r24	; 27
			if(PINA == 0xFE) return '4*';				//0b 1111 1110
 10c:	89 b3       	in	r24, 0x19	; 25
 10e:	8e 3f       	cpi	r24, 0xFE	; 254
 110:	f9 f0       	breq	.+62     	; 0x150 <keyScan+0xb2>
			else if (PINA == 0xFD) return '0';			//0b 1111 1101
 112:	89 b3       	in	r24, 0x19	; 25
 114:	8d 3f       	cpi	r24, 0xFD	; 253
 116:	f1 f0       	breq	.+60     	; 0x154 <keyScan+0xb6>
			else if(PINA == 0xFB) return '#';			//0b 1111 1011
 118:	89 b3       	in	r24, 0x19	; 25
 11a:	8b 3f       	cpi	r24, 0xFB	; 251
 11c:	e9 f0       	breq	.+58     	; 0x158 <keyScan+0xba>
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	97 e4       	ldi	r25, 0x47	; 71
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <keyScan+0x84>
 126:	00 c0       	rjmp	.+0      	; 0x128 <keyScan+0x8a>
 128:	00 00       	nop
			_delay_ms(10);	
 12a:	08 95       	ret
}

unsigned char keyScan()
{
		PORTA = 0xF7;								//0b 1111 0111 ->
			if(PINA == 0xF6) return '1';				//0b 1111 0110
 12c:	81 e3       	ldi	r24, 0x31	; 49
 12e:	08 95       	ret
			else if (PINA == 0xFD) return '2';			//0b 1111 1101
 130:	82 e3       	ldi	r24, 0x32	; 50
 132:	08 95       	ret
			else if(PINA == 0xFB) return '3';			//0b 1111 1011
 134:	83 e3       	ldi	r24, 0x33	; 51
 136:	08 95       	ret
			_delay_ms(10);
		
		PORTA = 0xEF;								//0b 1110 1111 ->
			if(PINA == 0xFE)	return '4';				//0b 1111 1110
 138:	84 e3       	ldi	r24, 0x34	; 52
 13a:	08 95       	ret
			else if (PINA == 0xFD) return '5';			//0b 1111 1101
 13c:	85 e3       	ldi	r24, 0x35	; 53
 13e:	08 95       	ret
			else if(PINA == 0xFB) return '6';			//0b 1111 1011
 140:	86 e3       	ldi	r24, 0x36	; 54
 142:	08 95       	ret
			_delay_ms(10);
		
		PORTA = 0xDF;								//0b 1101 1111 ->
			if(PINA == 0xFE) return '7';				//0b 1111 1110
 144:	87 e3       	ldi	r24, 0x37	; 55
 146:	08 95       	ret
			else if (PINA == 0xFD) return '8';			//0b 1111 1101
 148:	88 e3       	ldi	r24, 0x38	; 56
 14a:	08 95       	ret
			else if(PINA == 0xFB) return '9';			//0b 1111 1011
 14c:	89 e3       	ldi	r24, 0x39	; 57
 14e:	08 95       	ret
			_delay_ms(10);
		
		PORTA = 0xBF;								//0b 1011 1111 ->
			if(PINA == 0xFE) return '4*';				//0b 1111 1110
 150:	8a e2       	ldi	r24, 0x2A	; 42
 152:	08 95       	ret
			else if (PINA == 0xFD) return '0';			//0b 1111 1101
 154:	80 e3       	ldi	r24, 0x30	; 48
 156:	08 95       	ret
			else if(PINA == 0xFB) return '#';			//0b 1111 1011
 158:	83 e2       	ldi	r24, 0x23	; 35
			_delay_ms(10);	
 15a:	08 95       	ret

0000015c <main>:
unsigned char keyScan();

int main()
{
	unsigned key;
	DDRA = 0xF8;	//0b 1111 1000 -> 포트A의 상위 3비트는 출력(row),
 15c:	88 ef       	ldi	r24, 0xF8	; 248
 15e:	8a bb       	out	0x1a, r24	; 26
					// 하위 4비트는 입력(col)으로 설정(포트 하나에 입출력 다 사용)
	DDRC = 0xFF;
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	84 bb       	out	0x14, r24	; 20
						
	while(1)
	{
		key = keyScan();
 164:	9c df       	rcall	.-200    	; 0x9e <keyScan>
		if(key == '1') PORTC = 0x01;
 166:	81 33       	cpi	r24, 0x31	; 49
 168:	e9 f7       	brne	.-6      	; 0x164 <main+0x8>
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	85 bb       	out	0x15, r24	; 21
 16e:	fa cf       	rjmp	.-12     	; 0x164 <main+0x8>

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
